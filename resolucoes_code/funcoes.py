# FUN√á√ïES EM PYTHON
# Fun√ß√µes s√£o blocos de c√≥digo que fazem uma tarefa espec√≠fica
# √â como criar suas pr√≥prias "ferramentas" para usar v√°rias vezes

print("=== TRABALHANDO COM FUN√á√ïES ===\n")

# 1. FUN√á√ÉO SIMPLES (sem par√¢metros e sem retorno)
def saudacao():
    """Esta fun√ß√£o exibe uma sauda√ß√£o"""
    print("Ol√°! Bem-vindo ao Python! üëã")

print("1. Fun√ß√£o simples:")
saudacao()  # Chamando a fun√ß√£o

print("\n" + "="*40 + "\n")
 # ===============================
 # 4. FUN√á√ÉO COM M√öLTIPLOS PAR√ÇMETROS E PAR√ÇMETROS PADR√ÉO
 # Esta fun√ß√£o calcula a √°rea de um ret√¢ngulo. Se voc√™ n√£o informar a altura, ela usa o valor padr√£o 1.
 # Isso √© √∫til para calcular √°reas de linhas ou quando s√≥ se tem a largura.
 # ===============================
 # ===============================
 # 6. FUN√á√ïES QUE TRABALHAM COM LISTAS
 # Estas fun√ß√µes mostram como manipular listas de n√∫meros em Python
 # ===============================

# 2. FUN√á√ÉO COM PAR√ÇMETROS
def saudacao_personalizada(nome):
    """Esta fun√ß√£o recebe um nome e exibe uma sauda√ß√£o personalizada"""
    print(f"Ol√°, {nome}! Como voc√™ est√° hoje? üòä")

print("2. Fun√ß√£o com par√¢metros:")
saudacao_personalizada("Maria")
saudacao_personalizada("Jo√£o")

print("\n" + "="*40 + "\n")

# 3. FUN√á√ÉO COM RETORNO
def somar(a, b):
    """Esta fun√ß√£o soma dois n√∫meros e retorna o resultado"""
    resultado = a + b
    return resultado

print("3. Fun√ß√£o com retorno:")
soma_resultado = somar(5, 3)
print(f"5 + 3 = {soma_resultado}")
print(f"10 + 20 = {somar(10, 20)}")  # Usando direto

print("\n" + "="*40 + "\n")

# 4. FUN√á√ÉO COM M√öLTIPLOS PAR√ÇMETROS E PAR√ÇMETROS PADR√ÉO
def calcular_area_retangulo(largura, altura=1):
    """Calcula a √°rea de um ret√¢ngulo. Se altura n√£o for fornecida, usa 1"""
    # Multiplica largura pela altura para obter a √°rea
    area = largura * altura
    # Retorna o valor calculado
    return area

print("4. Fun√ß√£o com par√¢metro padr√£o:")
 # Exemplos de uso da fun√ß√£o com diferentes valores
print(f"√Årea de ret√¢ngulo 5x3: {calcular_area_retangulo(5, 3)}")
print(f"√Årea de quadrado 4x4: {calcular_area_retangulo(4, 4)}")
print(f"√Årea de linha 7x1: {calcular_area_retangulo(7)}")  # usa altura padr√£o
 # ===============================
 # 5. FUN√á√ÉO QUE RETORNA M√öLTIPLOS VALORES
 # Esta fun√ß√£o faz v√°rias opera√ß√µes com dois n√∫meros e retorna todos os resultados de uma vez.
 # Voc√™ pode usar cada resultado separadamente depois.
 # ===============================

print("\n" + "="*40 + "\n")

# 5. FUN√á√ÉO QUE RETORNA M√öLTIPLOS VALORES
def operacoes_basicas(a, b):
    """Realiza opera√ß√µes b√°sicas com dois n√∫meros"""
    # Soma os dois n√∫meros
    soma = a + b
    # Subtrai o segundo n√∫mero do primeiro
    subtracao = a - b
    # Multiplica os dois n√∫meros
    multiplicacao = a * b
    # Divide o primeiro pelo segundo, mas verifica se o segundo n√£o √© zero para evitar erro
    divisao = a / b if b != 0 else "Divis√£o por zero!"
    
    # Retorna todos os resultados juntos (como uma "caixa" com v√°rios valores)
    return soma, subtracao, multiplicacao, divisao

print("5. Fun√ß√£o com m√∫ltiplos retornos:")
 # Exemplo de uso da fun√ß√£o: recebe quatro resultados de uma vez
num1, num2 = 15, 3
s, sub, mult, div = operacoes_basicas(num1, num2)
 # Mostra os n√∫meros usados
print(f"N√∫meros: {num1} e {num2}")
 # Mostra cada opera√ß√£o separadamente
print(f"Soma: {s}")
print(f"Subtra√ß√£o: {sub}")
print(f"Multiplica√ß√£o: {mult}")
print(f"Divis√£o: {div}")

print("\n" + "="*40 + "\n")

# 6. FUN√á√ÉO QUE TRABALHA COM LISTAS
def encontrar_maior(lista_numeros):
    """Encontra o maior n√∫mero em uma lista"""
    # Se a lista estiver vazia, retorna None
    if not lista_numeros:  # Se a lista estiver vazia
        return None
    
    # Assume que o primeiro n√∫mero √© o maior inicialmente
    maior = lista_numeros[0]
    # Percorre cada n√∫mero da lista
    for numero in lista_numeros:
        # Se encontrar um n√∫mero maior, atualiza a vari√°vel 'maior'
        if numero > maior:
            maior = numero
    # Retorna o maior n√∫mero encontrado
    return maior

def calcular_media(lista_numeros):
    """Calcula a m√©dia de uma lista de n√∫meros"""
    # Se a lista estiver vazia, retorna 0
    if not lista_numeros:
        return 0
    # Soma todos os n√∫meros e divide pela quantidade de elementos
    return sum(lista_numeros) / len(lista_numeros)

print("6. Fun√ß√µes que trabalham com listas:")
 # Exemplo de lista de n√∫meros
numeros = [23, 45, 12, 67, 34, 89, 15]
print(f"Lista: {numeros}")
 # Mostra o maior n√∫mero da lista usando a fun√ß√£o
print(f"Maior n√∫mero: {encontrar_maior(numeros)}")
 # Mostra a m√©dia dos n√∫meros da lista usando a fun√ß√£o
print(f"M√©dia: {calcular_media(numeros):.2f}")

print("\n" + "="*40 + "\n")

# 7. FUN√á√ÉO RECURSIVA (fun√ß√£o que chama ela mesma)
def fatorial(n):
    """Calcula o fatorial de um n√∫mero usando recurs√£o"""
    if n <= 1:
        return 1
    else:
        return n * fatorial(n - 1)

print("7. Fun√ß√£o recursiva (fatorial):")
for i in range(1, 6):
    print(f"{i}! = {fatorial(i)}")

print("\n" + "="*40 + "\n")

# 8. EXEMPLO PR√ÅTICO: CALCULADORA COM FUN√á√ïES
def menu():
    """Exibe o menu da calculadora"""
    print("\nüßÆ CALCULADORA")
    print("1. Somar")
    print("2. Subtrair")
    print("3. Multiplicar")
    print("4. Dividir")
    print("5. Sair")
    return input("Escolha uma op√ß√£o: ")

def obter_numeros():
    """Solicita dois n√∫meros ao usu√°rio"""
    a = float(input("Digite o primeiro n√∫mero: "))
    b = float(input("Digite o segundo n√∫mero: "))
    return a, b

def dividir_seguro(a, b):
    """Divide dois n√∫meros com verifica√ß√£o de divis√£o por zero"""
    if b == 0:
        return "Erro: Divis√£o por zero!"
    return a / b

print("8. Exemplo pr√°tico - Calculadora:")
print("Simula√ß√£o de uso da calculadora...")

# Exemplo de uso da calculadora
opcao = "1"  # Simulando escolha do usu√°rio
if opcao == "1":
    # Simulando entrada do usu√°rio
    x, y = 10, 5
    resultado = somar(x, y)
    print(f"Simula√ß√£o: {x} + {y} = {resultado}")

print("\nüéâ Agora voc√™ j√° sabe como criar e usar fun√ß√µes em Python!")
print("üí° Dica: Fun√ß√µes tornam o c√≥digo mais organizado e reutiliz√°vel!")
